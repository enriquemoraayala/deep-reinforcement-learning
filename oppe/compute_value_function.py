"script to compute the value function of episodes generated by rllib"

import argparse
import json
import os
from datetime import datetime
import ray
import pandas as pd
import gymnasium as gym
import csv
from ray.rllib.offline.json_reader import JsonReader


def load_json_to_df(json_path, num_eps):
    rows = []
    reader = JsonReader(json_path)
    for i in range(num_eps):
        episode = reader.next()
        for step in range(len(episode)):
            row = {'ep': episode['eps_id'][step],
                   'step': step,
                   'state': episode['obs'][step],
                   'action': episode['actions'][step],
                   'prob': episode['action_prob'][step],
                   'logprob': episode['action_logp'][step],
                   'reward': episode['rewards'][step],
                   'next_state': episode['new_obs'][step],
                   'done': episode['dones'][step]
            }
            rows.append(row)
    return pd.DataFrame(rows)


def add_expected_reward_to_df(df, total_episodes):
    discount = 0.99  # based in the PPO original paper, default discount
    for ep in range(total_episodes):
        df_ = df[df['ep'] == ep].copy()
        df_.sort_values(by=['step'], inplace=True)
        cum_reward = 0.0
        j = 0
        for i, step in df_.iterrows():
            cum_reward = cum_reward + step.reward * discount**j
            df.at[i, 'exp_reward'] = cum_reward
            j += 1
    return df


def compute_value_function(agent_type, df):
    J_eps = 0.0
    df_ = df.groupby('ep').last()
    J_eps = df_['exp_reward'].mean()
    print('Total Real Value function of %s Policy: %.8f' %
          (agent_type, J_eps))
    return J_eps


def policy_value_functions(args):
    now = datetime.now()
    now = now.strftime("%d%m%y%H")
    total_episodes = int(args.num_episodes)
    df_e = load_json_to_df(args.policy_episodes_path, total_episodes)
    df_e = add_expected_reward_to_df(df_e, total_episodes)
    v_function_eval = compute_value_function('Evaluation', df_e)


def main(args):
    policy_value_functions(args)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Train RL agent on WAF-Brain Environment with RLLib")
    parser.add_argument("--policy_episodes_path",
                        default="./episodes/310720251600/310725_generated_rllib_ppo_rllib_seed_0000_100eps_0steps_exp_0")
    parser.add_argument("--num_episodes", default="100")
    args = parser.parse_args()
    print(f"Running with following CLI options: {args}")
    main(args)